console.log("Webcam script loaded");class l{constructor(){var e,t;this.video=null,this.detectionStatus=null,this.model=null,this.stream=null,this.permissionGranted=!1,this.deviceId=null,this.testId=(e=document.getElementById("test-id"))==null?void 0:e.value,this.candidateId=(t=document.getElementById("candidate-id"))==null?void 0:t.value,console.log("Test session data:",{test_id:this.testId,candidate_id:this.candidateId,elements:{testIdElement:!!document.getElementById("test-id"),candidateIdElement:!!document.getElementById("candidate-id")}}),this.screenshotCanvas=document.createElement("canvas"),this.screenshotContext=this.screenshotCanvas.getContext("2d"),this.screenshotInterval=null,this.isCapturingScreenshots=!1,this.screenshotIntervalTime=3e4,this.screenshotQueue=[],this.maxQueueSize=10,this.screenshotRetryAttempts=3,this.screenshotRetryDelay=5e3,this.isProcessingQueue=!1,this.failedScreenshots=[],this.screenshotStats={attempted:0,successful:0,failed:0,lastSuccess:null,lastError:null},(!this.testId||!this.candidateId)&&(console.log("No active test session, screenshots will be disabled"),this.isCapturingScreenshots=!1),this.isSafari=/^((?!chrome|android).)*safari/i.test(navigator.userAgent),this.allowedRoutes=["/invitation/\\w+","/candidate/dashboard","/tests/\\d+/","/tests/\\d+/start"],this.lastViolationTimes={"More than One Person":0,Book:0,Cellphone:0},this.violationFrameCounters={"More than One Person":0,Book:0,Cellphone:0},this.FRAME_THRESHOLD=50,this.COOLDOWN_PERIOD=3e4,this.initialize()}initializeCanvas(){try{if(this.screenshotCanvas=document.createElement("canvas"),this.screenshotContext=this.screenshotCanvas.getContext("2d"),!this.screenshotContext)throw new Error("Failed to get 2D context from canvas");this.screenshotCanvas.width=640,this.screenshotCanvas.height=480,console.log("Canvas initialized successfully")}catch(e){console.error("Error initializing canvas:",e),this.screenshotCanvas=null,this.screenshotContext=null}}async initializeCamera(){if(console.log("Initializing camera for route:",window.location.pathname),this.video=document.getElementById("video"),this.detectionStatus=document.getElementById("detection-status"),!this.video||!this.detectionStatus){console.error("Required elements not found");return}this.video.addEventListener("loadedmetadata",()=>{console.log("Video metadata loaded, dimensions:",this.video.videoWidth,"x",this.video.videoHeight),this.screenshotCanvas&&this.video.videoWidth&&(this.screenshotCanvas.width=this.video.videoWidth,this.screenshotCanvas.height=this.video.videoHeight)}),await this.requestCameraAccess(),this.screenshotCanvas&&this.screenshotContext?this.startPeriodicScreenshots(this.screenshotIntervalTime):console.error("Cannot start screenshots - canvas not initialized")}async initialize(){try{const e=await this.checkServerPermission();this.permissionGranted=(e==null?void 0:e.granted)||!1,this.deviceId=(e==null?void 0:e.deviceId)||null,console.log("Initial permission status from server:",this.permissionGranted),console.log("Current path:",window.location.pathname),this.shouldActivateCamera()&&await this.initializeCamera()}catch(e){console.error("Initialization error:",e),this.handleCameraError("Failed to initialize camera permissions")}}updateStatus(e,t,s){let i="";const o=Date.now(),r=(h,n)=>{h?(this.violationFrameCounters[n]++,this.violationFrameCounters[n]>=this.FRAME_THRESHOLD&&(o-this.lastViolationTimes[n]>=this.COOLDOWN_PERIOD&&(document.dispatchEvent(new CustomEvent("webcamViolation",{detail:{violation:n}})),this.lastViolationTimes[n]=o,console.log(`Violation recorded for ${n}`)),this.violationFrameCounters[n]=0)):this.violationFrameCounters[n]=0};e>1?(i+=`<p style='color: orange;'>${e} people detected!</p>`,r(!0,"More than One Person")):e===0?(i+="<p style='color: red;'>No one is present!</p>",r(!1,"More than One Person")):(i+="<p style='color: green;'>One person detected</p>",r(!1,"More than One Person")),t?(i+="<p>Book detected</p>",r(!0,"Book")):r(!1,"Book"),s?(i+="<p>Cell phone detected</p>",r(!0,"Cellphone")):r(!1,"Cellphone"),this.detectionStatus&&(this.detectionStatus.innerHTML=i)}getCsrfToken(){const e=document.querySelector('meta[name="csrf-token"]');return e?e.getAttribute("content"):""}async checkServerPermission(){try{console.log("Checking server permission...");const e=await fetch("/camera-permission",{method:"GET",headers:{Accept:"application/json","X-CSRF-TOKEN":this.getCsrfToken(),"X-Requested-With":"XMLHttpRequest"},credentials:"same-origin"});if(console.log("Server response:",e),!e.ok)throw new Error(`Server returned ${e.status}`);const t=await e.json();return console.log("Permission data:",t),t.permission||{granted:!1,deviceId:null,streamActive:!1}}catch(e){return console.error("Error checking server permission:",e),{granted:!1,deviceId:null,streamActive:!1}}}async updateServerPermission(e,t=null,s=!1){try{console.log("Updating server permission...",{granted:e,deviceId:t,streamActive:s});const i=await fetch("/camera-permission",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json","X-CSRF-TOKEN":this.getCsrfToken(),"X-Requested-With":"XMLHttpRequest"},credentials:"same-origin",body:JSON.stringify({granted:e,deviceId:t,streamActive:s})});if(console.log("Update response:",i),!i.ok)throw new Error(`Server returned ${i.status}`);const o=await i.json();return console.log("Update result:",o),o.success}catch(i){return console.error("Error updating server permission:",i),!1}}shouldActivateCamera(){const e=window.location.pathname;return this.allowedRoutes.some(t=>new RegExp("^"+t).test(e))}async requestCameraAccess(){try{if(this.permissionGranted&&this.deviceId)try{this.stream=await navigator.mediaDevices.getUserMedia({video:{deviceId:{exact:this.deviceId}},audio:!1})}catch{console.warn("Failed to reuse device, requesting new access"),this.stream=await this.getNewVideoStream()}else this.stream=await this.getNewVideoStream();await this.setupVideoStream()}catch(e){console.error("Camera access error:",e),await this.updateServerPermission(!1,null,!1),this.handleCameraError(e.message||"Failed to access camera")}}async getNewVideoStream(){return await navigator.mediaDevices.getUserMedia({video:!0,audio:!1})}async setupVideoStream(){const e=this.stream.getVideoTracks()[0];if(e){const t=e.getSettings();await this.updateServerPermission(!0,t.deviceId,!0)}return this.video.srcObject=this.stream,new Promise(t=>{this.video.onloadedmetadata=()=>{console.log("Video metadata loaded"),this.video.play(),this.initializeDetection(),this.detectionStatus.innerHTML="<p style='color: green;'>Webcam started successfully</p>";const s=document.getElementById("camera-warning");s&&(s.style.display="none"),t()}})}async preserveStream(){if(this.stream&&this.stream.active){const e=this.stream.getVideoTracks()[0];if(e)try{const t=e.clone(),s=new MediaStream([t]);return this.stream=s,!0}catch(t){return console.error("Failed to preserve stream:",t),!1}}return!1}async initializeDetection(){console.log("4");try{console.log("Loading COCO-SSD model..."),this.model=await cocoSsd.load(),console.log("COCO-SSD model loaded successfully"),this.detectObjects()}catch(e){console.error("Model initialization error:",e),this.detectionStatus.innerHTML+="<p style='color: red;'>Object detection unavailable</p>"}}async detectObjects(){if(!(!this.model||!this.video||!this.shouldActivateCamera())){try{const e=await this.model.detect(this.video);let t=0,s=!1,i=!1;e.forEach(o=>{o.class==="person"&&t++,o.class==="book"&&(s=!0),o.class==="cell phone"&&(i=!0)}),this.updateStatus(t,s,i),document.dispatchEvent(new CustomEvent("webcamStatusUpdate",{detail:{personCount:t,hasBook:s,hasCellPhone:i}}))}catch(e){console.error("Detection error:",e)}this.video.readyState===4&&requestAnimationFrame(()=>this.detectObjects())}}startPeriodicScreenshots(e=this.screenshotIntervalTime){if(this.isCapturingScreenshots){console.log("Screenshot capture already running");return}if(!this.screenshotCanvas||!this.screenshotContext){console.error("Cannot start screenshots - canvas not initialized");return}this.screenshotIntervalTime=e,this.isCapturingScreenshots=!0,console.log(`Starting periodic screenshots every ${e}ms`),this.captureScreenshot(),this.screenshotInterval=setInterval(()=>{this.captureScreenshot()},this.screenshotIntervalTime)}stopPeriodicScreenshots(){this.screenshotInterval&&(clearInterval(this.screenshotInterval),this.screenshotInterval=null,this.isCapturingScreenshots=!1,console.log("Stopped periodic screenshots"))}async captureScreenshot(){var e;if(!this.video||!this.video.videoWidth||!this.screenshotCanvas||!this.screenshotContext){console.error("Video or canvas not ready",{video:!!this.video,videoWidth:(e=this.video)==null?void 0:e.videoWidth,canvas:!!this.screenshotCanvas,context:!!this.screenshotContext});return}try{console.log("Attempting to capture screenshot..."),this.screenshotCanvas.width=this.video.videoWidth,this.screenshotCanvas.height=this.video.videoHeight,this.screenshotContext.drawImage(this.video,0,0);const t=this.screenshotCanvas.toDataURL("image/jpeg",.8);console.log("Sending screenshot to server...");const s=await fetch("/api/screenshots",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json","X-CSRF-TOKEN":this.getCsrfToken(),"X-Requested-With":"XMLHttpRequest"},body:JSON.stringify({screenshot:t,timestamp:new Date().toISOString()})}),i=await s.json();if(console.log("Server response:",i),!s.ok)throw new Error(`Server returned ${s.status}: ${i.message||"Unknown error"}`)}catch(t){console.error("Error capturing/saving screenshot:",t)}}async queueScreenshot(e){this.screenshotQueue.length>=this.maxQueueSize&&this.screenshotQueue.shift(),this.screenshotQueue.push(e),this.screenshotStats.attempted++,this.isProcessingQueue||await this.processScreenshotQueue()}async processScreenshotQueue(){if(!(this.isProcessingQueue||this.screenshotQueue.length===0)){for(this.isProcessingQueue=!0;this.screenshotQueue.length>0;){const e=this.screenshotQueue[0];let t=!1;try{t=await this.saveScreenshot(e),t?(this.screenshotQueue.shift(),this.screenshotStats.successful++,this.screenshotStats.lastSuccess=new Date):(e.attempts++,e.attempts>=this.screenshotRetryAttempts?(this.screenshotQueue.shift(),this.failedScreenshots.push({timestamp:e.timestamp,error:"Max retry attempts exceeded"})):(this.screenshotQueue.shift(),this.screenshotQueue.push(e),await this.delay(this.screenshotRetryDelay)))}catch(s){console.error("Error processing screenshot:",s),e.attempts++,this.screenshotStats.lastError={timestamp:new Date,error:s.message}}}this.isProcessingQueue=!1}}delay(e){return new Promise(t=>setTimeout(t,e))}getScreenshotStats(){return{...this.screenshotStats,queueLength:this.screenshotQueue.length,failedScreenshots:this.failedScreenshots.length}}cleanup(){this.stopPeriodicScreenshots(),this.screenshotQueue.length>0?(console.log(`Attempting to process ${this.screenshotQueue.length} remaining screenshots...`),this.processScreenshotQueue().finally(()=>{this.stream&&this.stream.getTracks().forEach(e=>e.stop())})):this.stream&&this.stream.getTracks().forEach(e=>e.stop())}}let a=null;document.addEventListener("DOMContentLoaded",function(){const c=document.getElementById("video"),e=document.getElementById("detection-status");c&&e?(console.log("Required webcam elements found, initializing WebcamManager"),a=new l):console.log("Webcam elements not found on this page, skipping initialization")});window.addEventListener("beforeunload",function(){a&&a.cleanup()});
